// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: models.proto

#include "models.pb.h"
#include "models.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace models {

static const char* RemoteEndpoint_method_names[] = {
  "/models.RemoteEndpoint/GetServerInfo",
  "/models.RemoteEndpoint/ListDevices",
  "/models.RemoteEndpoint/ReadPacket",
  "/models.RemoteEndpoint/ReadAll",
};

std::unique_ptr< RemoteEndpoint::Stub> RemoteEndpoint::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteEndpoint::Stub> stub(new RemoteEndpoint::Stub(channel, options));
  return stub;
}

RemoteEndpoint::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServerInfo_(RemoteEndpoint_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDevices_(RemoteEndpoint_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadPacket_(RemoteEndpoint_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReadAll_(RemoteEndpoint_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status RemoteEndpoint::Stub::GetServerInfo(::grpc::ClientContext* context, const ::models::Empty& request, ::models::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::models::Empty, ::models::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerInfo_, context, request, response);
}

void RemoteEndpoint::Stub::async::GetServerInfo(::grpc::ClientContext* context, const ::models::Empty* request, ::models::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::models::Empty, ::models::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerInfo_, context, request, response, std::move(f));
}

void RemoteEndpoint::Stub::async::GetServerInfo(::grpc::ClientContext* context, const ::models::Empty* request, ::models::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::models::ServerInfo>* RemoteEndpoint::Stub::PrepareAsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::models::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::models::ServerInfo, ::models::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::models::ServerInfo>* RemoteEndpoint::Stub::AsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::models::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteEndpoint::Stub::ListDevices(::grpc::ClientContext* context, const ::models::Empty& request, ::models::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::models::Empty, ::models::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDevices_, context, request, response);
}

void RemoteEndpoint::Stub::async::ListDevices(::grpc::ClientContext* context, const ::models::Empty* request, ::models::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::models::Empty, ::models::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, std::move(f));
}

void RemoteEndpoint::Stub::async::ListDevices(::grpc::ClientContext* context, const ::models::Empty* request, ::models::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::models::DeviceResponse>* RemoteEndpoint::Stub::PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::models::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::models::DeviceResponse, ::models::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::models::DeviceResponse>* RemoteEndpoint::Stub::AsyncListDevicesRaw(::grpc::ClientContext* context, const ::models::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::models::Packet>* RemoteEndpoint::Stub::ReadPacketRaw(::grpc::ClientContext* context, const ::models::PacketRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::models::Packet>::Create(channel_.get(), rpcmethod_ReadPacket_, context, request);
}

void RemoteEndpoint::Stub::async::ReadPacket(::grpc::ClientContext* context, const ::models::PacketRequest* request, ::grpc::ClientReadReactor< ::models::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::models::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadPacket_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::models::Packet>* RemoteEndpoint::Stub::AsyncReadPacketRaw(::grpc::ClientContext* context, const ::models::PacketRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::models::Packet>::Create(channel_.get(), cq, rpcmethod_ReadPacket_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::models::Packet>* RemoteEndpoint::Stub::PrepareAsyncReadPacketRaw(::grpc::ClientContext* context, const ::models::PacketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::models::Packet>::Create(channel_.get(), cq, rpcmethod_ReadPacket_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::models::ReadAllOn, ::models::Packet>* RemoteEndpoint::Stub::ReadAllRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::models::ReadAllOn, ::models::Packet>::Create(channel_.get(), rpcmethod_ReadAll_, context);
}

void RemoteEndpoint::Stub::async::ReadAll(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::models::ReadAllOn,::models::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::models::ReadAllOn,::models::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::models::ReadAllOn, ::models::Packet>* RemoteEndpoint::Stub::AsyncReadAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::models::ReadAllOn, ::models::Packet>::Create(channel_.get(), cq, rpcmethod_ReadAll_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::models::ReadAllOn, ::models::Packet>* RemoteEndpoint::Stub::PrepareAsyncReadAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::models::ReadAllOn, ::models::Packet>::Create(channel_.get(), cq, rpcmethod_ReadAll_, context, false, nullptr);
}

RemoteEndpoint::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteEndpoint_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteEndpoint::Service, ::models::Empty, ::models::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteEndpoint::Service* service,
             ::grpc::ServerContext* ctx,
             const ::models::Empty* req,
             ::models::ServerInfo* resp) {
               return service->GetServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteEndpoint_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteEndpoint::Service, ::models::Empty, ::models::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteEndpoint::Service* service,
             ::grpc::ServerContext* ctx,
             const ::models::Empty* req,
             ::models::DeviceResponse* resp) {
               return service->ListDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteEndpoint_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RemoteEndpoint::Service, ::models::PacketRequest, ::models::Packet>(
          [](RemoteEndpoint::Service* service,
             ::grpc::ServerContext* ctx,
             const ::models::PacketRequest* req,
             ::grpc::ServerWriter<::models::Packet>* writer) {
               return service->ReadPacket(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteEndpoint_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RemoteEndpoint::Service, ::models::ReadAllOn, ::models::Packet>(
          [](RemoteEndpoint::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::models::Packet,
             ::models::ReadAllOn>* stream) {
               return service->ReadAll(ctx, stream);
             }, this)));
}

RemoteEndpoint::Service::~Service() {
}

::grpc::Status RemoteEndpoint::Service::GetServerInfo(::grpc::ServerContext* context, const ::models::Empty* request, ::models::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteEndpoint::Service::ListDevices(::grpc::ServerContext* context, const ::models::Empty* request, ::models::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteEndpoint::Service::ReadPacket(::grpc::ServerContext* context, const ::models::PacketRequest* request, ::grpc::ServerWriter< ::models::Packet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteEndpoint::Service::ReadAll(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::models::Packet, ::models::ReadAllOn>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace models

